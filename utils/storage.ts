import { StudentRecord, Semester, Subject } from '@/types';
import * as XLSX from 'xlsx';
import { calculateSemesterGPA, calculateCumulativeGPA, getLetterGrade, getAcademicLevel, convertGradeToGPA, DEFAULT_GPA_SETTINGS } from './gpa';

const STORAGE_KEY = 'simulate-gpa-data';

// L∆∞u d·ªØ li·ªáu v√†o localStorage
export function saveData(data: StudentRecord): void {
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
  } catch (error) {
    console.error('L·ªói khi l∆∞u d·ªØ li·ªáu:', error);
  }
}

// L·∫•y d·ªØ li·ªáu t·ª´ localStorage
export function loadData(): StudentRecord | null {
  try {
    const data = localStorage.getItem(STORAGE_KEY);
    if (data) {
      const parsed = JSON.parse(data);
      
      // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu
      if (!parsed.id || !parsed.semesters || !Array.isArray(parsed.semesters)) {
        console.warn('‚ö†Ô∏è D·ªØ li·ªáu trong localStorage kh√¥ng h·ª£p l·ªá, th·ª≠ kh√¥i ph·ª•c t·ª´ backup');
        return tryRestoreFromBackup();
      }
      
      // Migration: Th√™m gpaSettings n·∫øu ch∆∞a c√≥
      if (!parsed.gpaSettings) {
        parsed.gpaSettings = DEFAULT_GPA_SETTINGS;
        console.log('üîÑ ƒê√£ migrate d·ªØ li·ªáu c≈©: th√™m gpaSettings m·∫∑c ƒë·ªãnh');
      }
      
      console.log('‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ localStorage th√†nh c√¥ng');
      return parsed;
    }
    
    console.log('‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong localStorage');
    return null;
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ localStorage:', error);
    console.log('üîÑ Th·ª≠ kh√¥i ph·ª•c t·ª´ backup...');
    return tryRestoreFromBackup();
  }
}

// Th·ª≠ kh√¥i ph·ª•c t·ª´ backup khi d·ªØ li·ªáu ch√≠nh b·ªã l·ªói
function tryRestoreFromBackup(): StudentRecord | null {
  try {
    const backups = restoreFromBackup();
    if (backups.length > 0) {
      const latestBackup = backups[0];
      console.log('‚úÖ ƒê√£ kh√¥i ph·ª•c t·ª´ backup th√†nh c√¥ng');
      return latestBackup;
    }
    console.log('‚ö†Ô∏è Kh√¥ng c√≥ backup ƒë·ªÉ kh√¥i ph·ª•c');
    return null;
  } catch (error) {
    console.error('‚ùå L·ªói khi kh√¥i ph·ª•c backup:', error);
    return null;
  }
}

// T·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
export function createDefaultData(): StudentRecord {
  return {
    id: 'student-1',
    studentName: 'Sinh vi√™n',
    semesters: [
      {
        id: 'semester-1',
        name: 'H·ªçc k·ª≥ hi·ªán t·∫°i',
        subjects: [
          {
            id: 'subject-1',
            name: 'To√°n cao c·∫•p',
            credits: 3,
            grade: null,
          },
        ],
        gpa: 0,
      },
    ],
    cumulativeGPA: 0,
    totalCredits: 0,
    completedCredits: 0,
    gpaSettings: DEFAULT_GPA_SETTINGS, // Th√™m c·∫•u h√¨nh thang ƒëo m·∫∑c ƒë·ªãnh
  };
}

// Export d·ªØ li·ªáu ra file
export function exportData(data: StudentRecord): void {
  const dataStr = JSON.stringify(data, null, 2);
  const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
  
  const exportFileDefaultName = `gpa-data-${new Date().toISOString().split('T')[0]}.json`;
  
  const linkElement = document.createElement('a');
  linkElement.setAttribute('href', dataUri);
  linkElement.setAttribute('download', exportFileDefaultName);
  linkElement.click();
}

// Import d·ªØ li·ªáu t·ª´ file
export function importData(file: File): Promise<StudentRecord> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const result = e.target?.result as string;
        const data = JSON.parse(result) as StudentRecord;
        
        // Validate data structure
        if (!data.id || !data.semesters || !Array.isArray(data.semesters)) {
          throw new Error('File kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
        }
        
        resolve(data);
      } catch (error) {
        reject(new Error('L·ªói khi ƒë·ªçc file: ' + (error as Error).message));
      }
    };
    reader.onerror = () => reject(new Error('L·ªói khi ƒë·ªçc file'));
    reader.readAsText(file);
  });
}

// Import d·ªØ li·ªáu t·ª´ file Excel
export function importFromExcel(file: File): Promise<StudentRecord> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const result = e.target?.result;
        const workbook = XLSX.read(result, { type: 'binary' });
        
        console.log('üîç Debug: ƒêang ph√¢n t√≠ch file Excel...');
        console.log('T√™n c√°c sheet:', workbook.SheetNames);
        
        // T√¨m sheet ch·ª©a d·ªØ li·ªáu m√¥n h·ªçc
        let dataSheet = null;
        let sheetName = '';
        
        // ∆Øu ti√™n t√¨m sheet "Chi ti·∫øt t·∫•t c·∫£ m√¥n" ho·∫∑c "T·∫•t c·∫£ c√°c m√¥n" (t√™n ch√≠nh x√°c t·ª´ export)
        const prioritySheets = ['Chi ti·∫øt t·∫•t c·∫£ m√¥n', 'T·∫•t c·∫£ c√°c m√¥n', 'T·∫•t c·∫£ m√¥n', 'Danh s√°ch m√¥n'];
        for (const sheet of prioritySheets) {
          if (workbook.SheetNames.includes(sheet)) {
            dataSheet = workbook.Sheets[sheet];
            sheetName = sheet;
            break;
          }
        }
        
        // N·∫øu kh√¥ng t√¨m th·∫•y, s·ª≠ d·ª•ng sheet ƒë·∫ßu ti√™n
        if (!dataSheet && workbook.SheetNames.length > 0) {
          sheetName = workbook.SheetNames[0];
          dataSheet = workbook.Sheets[sheetName];
        }
        
        if (!dataSheet) {
          throw new Error('Kh√¥ng t√¨m th·∫•y sheet d·ªØ li·ªáu trong file Excel');
        }
        
        console.log('üìã Sheet ƒë∆∞·ª£c ch·ªçn:', sheetName);
        
        // Chuy·ªÉn ƒë·ªïi sheet th√†nh m·∫£ng
        const jsonData = XLSX.utils.sheet_to_json(dataSheet, { header: 1 }) as any[][];
        
        console.log('üìä T·ªïng s·ªë d√≤ng:', jsonData.length);
        console.log('5 d√≤ng ƒë·∫ßu:', jsonData.slice(0, 5));
        
        if (jsonData.length < 3) {
          throw new Error('File Excel kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu');
        }
        
        // T√¨m h√†ng header (d√≤ng ch·ª©a "T√™n m√¥n h·ªçc" ho·∫∑c c√°c c·ªôt quan tr·ªçng)
        let headerRowIndex = -1;
        let nameColIndex = -1;
        let creditsColIndex = -1;
        let gradeColIndex = -1;
        let semesterColIndex = -1;
        
        console.log('üîé ƒêang t√¨m header...');
        
        for (let i = 0; i < Math.min(15, jsonData.length); i++) {
          const row = jsonData[i];
          if (Array.isArray(row) && row.length > 0) {
            console.log(`D√≤ng ${i}:`, row);
            
            for (let j = 0; j < row.length; j++) {
              const cell = String(row[j] || '').toLowerCase().trim();
              
              // T√¨m c·ªôt t√™n m√¥n h·ªçc (kh·ªõp ch√≠nh x√°c v·ªõi export)
              if (cell === 't√™n m√¥n h·ªçc' || cell.includes('t√™n m√¥n') || cell.includes('m√¥n h·ªçc')) {
                headerRowIndex = i;
                nameColIndex = j;
                console.log(`‚úÖ T√¨m th·∫•y c·ªôt t√™n m√¥n t·∫°i d√≤ng ${i}, c·ªôt ${j}: "${row[j]}"`);
              } 
              // T√¨m c·ªôt t√≠n ch·ªâ
              else if (cell === 't√≠n ch·ªâ' || cell.includes('t√≠n ch·ªâ') || cell.includes('credits') || cell === 'tc') {
                creditsColIndex = j;
                console.log(`‚úÖ T√¨m th·∫•y c·ªôt t√≠n ch·ªâ t·∫°i c·ªôt ${j}: "${row[j]}"`);
              } 
              // T√¨m c·ªôt ƒëi·ªÉm (linh ho·∫°t h∆°n)
              else if (
                cell === 'ƒëi·ªÉm s·ªë' || 
                cell === 'ƒëi·ªÉm t·ªïng' || 
                cell === 'ƒëi·ªÉm' ||
                (cell.includes('ƒëi·ªÉm') && 
                 !cell.includes('ch·ªØ') && 
                 !cell.includes('√ó') && 
                 !cell.includes('chuy√™n c·∫ßn') && 
                 !cell.includes('qu√° tr√¨nh') && 
                 !cell.includes('gi·ªØa k·ª≥') && 
                 !cell.includes('cu·ªëi k·ª≥') &&
                 !cell.includes('gpa'))
              ) {
                gradeColIndex = j;
                console.log(`‚úÖ T√¨m th·∫•y c·ªôt ƒëi·ªÉm t·∫°i c·ªôt ${j}: "${row[j]}"`);
              } 
              // T√¨m c·ªôt h·ªçc k·ª≥
              else if (cell === 'h·ªçc k·ª≥' || cell.includes('h·ªçc k·ª≥') || cell.includes('semester') || cell === 'hk') {
                semesterColIndex = j;
                console.log(`‚úÖ T√¨m th·∫•y c·ªôt h·ªçc k·ª≥ t·∫°i c·ªôt ${j}: "${row[j]}"`);
              }
            }
            if (headerRowIndex !== -1) break;
          }
        }
        
        if (headerRowIndex === -1 || nameColIndex === -1) {
          console.log('‚ùå Kh√¥ng t√¨m th·∫•y header ph√π h·ª£p');
          console.log('Debug th√¥ng tin:', {
            headerRowIndex,
            nameColIndex,
            sheetsAvailable: workbook.SheetNames,
            selectedSheet: sheetName,
            first10Rows: jsonData.slice(0, 10)
          });
          throw new Error('Kh√¥ng t√¨m th·∫•y c·ªôt "T√™n m√¥n h·ªçc" trong file Excel. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file.');
        }
        
        console.log('‚úÖ Ph√°t hi·ªán c·∫•u tr√∫c Excel:', {
          sheet: sheetName,
          headerRow: headerRowIndex,
          columns: {
            name: nameColIndex,
            credits: creditsColIndex, 
            grade: gradeColIndex,
            semester: semesterColIndex
          }
        });
        
        // T·ª± ƒë·ªông t√¨m c√°c c·ªôt n·∫øu ch∆∞a ƒë∆∞·ª£c x√°c ƒë·ªãnh
        if (creditsColIndex === -1 || gradeColIndex === -1) {
          const headerRow = jsonData[headerRowIndex];
          console.log('üîç T√¨m th√™m c·ªôt t·ª´ header row:', headerRow);
          
          for (let j = 0; j < headerRow.length; j++) {
            const cell = String(headerRow[j] || '').toLowerCase().trim();
            if (creditsColIndex === -1 && (cell === 't√≠n ch·ªâ' || cell.includes('t√≠n ch·ªâ') || cell.includes('credits') || cell === 'tc')) {
              creditsColIndex = j;
              console.log(`‚úÖ T√¨m th√™m c·ªôt t√≠n ch·ªâ t·∫°i ${j}: "${headerRow[j]}"`);
            }
            if (gradeColIndex === -1 && (
              cell === 'ƒëi·ªÉm s·ªë' || 
              cell === 'ƒëi·ªÉm t·ªïng' || 
              cell === 'ƒëi·ªÉm' ||
              (cell.includes('ƒëi·ªÉm') && 
               !cell.includes('ch·ªØ') && 
               !cell.includes('√ó') && 
               !cell.includes('chuy√™n c·∫ßn') && 
               !cell.includes('qu√° tr√¨nh') && 
               !cell.includes('gi·ªØa k·ª≥') && 
               !cell.includes('cu·ªëi k·ª≥') &&
               !cell.includes('gpa'))
            )) {
              gradeColIndex = j;
              console.log(`‚úÖ T√¨m th√™m c·ªôt ƒëi·ªÉm t·∫°i ${j}: "${headerRow[j]}"`);
            }
          }
        }
        
        // T·∫°o d·ªØ li·ªáu sinh vi√™n m·ªõi
        const studentData: StudentRecord = {
          id: generateId(),
          studentName: 'Sinh vi√™n (Import t·ª´ Excel)',
          semesters: [],
          cumulativeGPA: 0,
          totalCredits: 0,
          completedCredits: 0,
        };
        
        // Nh√≥m m√¥n h·ªçc theo h·ªçc k·ª≥
        const semesterMap = new Map<string, Subject[]>();
        
        // ƒê·ªçc d·ªØ li·ªáu t·ª´ c√°c h√†ng
        console.log('üìñ B·∫Øt ƒë·∫ßu ƒë·ªçc d·ªØ li·ªáu t·ª´ d√≤ng', headerRowIndex + 1);
        let validSubjectsCount = 0;
        
        for (let i = headerRowIndex + 1; i < jsonData.length; i++) {
          const row = jsonData[i];
          if (!Array.isArray(row) || row.length === 0) continue;
          
          const subjectName = String(row[nameColIndex] || '').trim();
          
          // B·ªè qua d√≤ng tr·ªëng, STT, ho·∫∑c d√≤ng header
          if (!subjectName || 
              subjectName.length === 0 || 
              subjectName === 'STT' || 
              /^\d+$/.test(subjectName) ||
              subjectName.toLowerCase().includes('danh s√°ch') ||
              subjectName.toLowerCase().includes('th·ªëng k√™') ||
              subjectName.toLowerCase().includes('b√°o c√°o')) {
            continue;
          }
          
          console.log(`D√≤ng ${i}: X·ª≠ l√Ω m√¥n "${subjectName}"`);
          
          // L·∫•y h·ªçc k·ª≥
          let semesterName = 'H·ªçc k·ª≥ Import';
          if (semesterColIndex !== -1 && row[semesterColIndex]) {
            semesterName = String(row[semesterColIndex]).trim();
          }
          
          // L·∫•y t√≠n ch·ªâ
          let credits = 3; // M·∫∑c ƒë·ªãnh 3 t√≠n ch·ªâ
          if (creditsColIndex !== -1 && row[creditsColIndex]) {
            const creditsValue = row[creditsColIndex];
            if (typeof creditsValue === 'number') {
              credits = creditsValue;
            } else if (typeof creditsValue === 'string') {
              const parsed = parseInt(creditsValue);
              if (!isNaN(parsed) && parsed > 0) {
                credits = parsed;
              }
            }
          }
          
          // L·∫•y ƒëi·ªÉm
          let grade: number | null = null;
          if (gradeColIndex !== -1 && row[gradeColIndex]) {
            const gradeValue = row[gradeColIndex];
            if (typeof gradeValue === 'number') {
              grade = gradeValue;
            } else if (typeof gradeValue === 'string') {
              const parsed = parseFloat(gradeValue);
              if (!isNaN(parsed) && parsed >= 0 && parsed <= 10) {
                grade = parsed;
              }
            }
          }
          
          // T·∫°o m√¥n h·ªçc
          const subject: Subject = {
            id: generateId(),
            name: subjectName,
            credits: credits,
            grade: grade,
          };
          
          console.log(`‚úÖ Th√™m m√¥n: ${subjectName} (${credits} TC, ƒëi·ªÉm: ${grade}) v√†o ${semesterName}`);
          
          // Th√™m v√†o semester map
          if (!semesterMap.has(semesterName)) {
            semesterMap.set(semesterName, []);
          }
          semesterMap.get(semesterName)!.push(subject);
          validSubjectsCount++;
        }
        
        console.log(`üìä ƒê√£ ƒë·ªçc ƒë∆∞·ª£c ${validSubjectsCount} m√¥n h·ªçc h·ª£p l·ªá`);
        console.log('Danh s√°ch h·ªçc k·ª≥:', Array.from(semesterMap.keys()));
        
        // T·∫°o c√°c semester t·ª´ map
        let semesterIndex = 1;
        for (const [semesterName, subjects] of Array.from(semesterMap.entries())) {
          const semester: Semester = {
            id: generateId(),
            name: semesterName || `H·ªçc k·ª≥ ${semesterIndex}`,
            subjects: subjects,
            gpa: calculateSemesterGPA(subjects),
          };
          studentData.semesters.push(semester);
          console.log(`üìö T·∫°o h·ªçc k·ª≥: ${semester.name} v·ªõi ${subjects.length} m√¥n`);
          semesterIndex++;
        }
        
        // N·∫øu kh√¥ng c√≥ semester n√†o, t·∫°o m·ªôt semester m·∫∑c ƒë·ªãnh
        if (studentData.semesters.length === 0) {
          console.log('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu m√¥n h·ªçc h·ª£p l·ªá');
          throw new Error('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu m√¥n h·ªçc n√†o trong file Excel. Vui l√≤ng ki·ªÉm tra l·∫°i file v√† ƒë·∫£m b·∫£o c√≥ c·ªôt "T√™n m√¥n h·ªçc".');
        }
        
        // T√≠nh to√°n GPA t√≠ch l≈©y
        studentData.cumulativeGPA = calculateCumulativeGPA(studentData.semesters);
        
        console.log('üéâ Import Excel th√†nh c√¥ng:', {
          semesters: studentData.semesters.length,
          totalSubjects: studentData.semesters.reduce((sum, sem) => sum + sem.subjects.length, 0),
          cumulativeGPA: studentData.cumulativeGPA.toFixed(3)
        });
        
        resolve(studentData);
      } catch (error) {
        console.error('‚ùå L·ªói import Excel:', error);
        reject(new Error('L·ªói khi ƒë·ªçc file Excel: ' + (error as Error).message));
      }
    };
    
    reader.onerror = () => reject(new Error('L·ªói khi ƒë·ªçc file Excel'));
    reader.readAsBinaryString(file);
  });
}

// Clear all data
export function clearData(): void {
  try {
    localStorage.removeItem(STORAGE_KEY);
  } catch (error) {
    console.error('L·ªói khi x√≥a d·ªØ li·ªáu:', error);
  }
}

// Generate unique ID
export function generateId(): string {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

// T·∫°o file Excel m·∫´u ƒë·ªÉ test import
export function createSampleExcel(): void {
  const workbook = XLSX.utils.book_new();
  
  // T·∫°o data m·∫´u ƒë∆°n gi·∫£n
  const sampleData = [
    ['üìã FILE EXCEL M·∫™U ƒê·ªÇ TEST IMPORT', '', '', '', ''],
    ['', '', '', '', ''],
    ['STT', 'T√™n m√¥n h·ªçc', 'T√≠n ch·ªâ', 'ƒêi·ªÉm s·ªë', 'H·ªçc k·ª≥'],
    [1, 'To√°n cao c·∫•p A1', 3, 8.5, 'H·ªçc k·ª≥ 1'],
    [2, 'V·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng', 4, 7.8, 'H·ªçc k·ª≥ 1'],
    [3, 'H√≥a h·ªçc ƒë·∫°i c∆∞∆°ng', 3, 8.2, 'H·ªçc k·ª≥ 1'],
    [4, 'L·∫≠p tr√¨nh C++', 4, 9.0, 'H·ªçc k·ª≥ 2'],
    [5, 'C·∫•u tr√∫c d·ªØ li·ªáu', 3, 8.7, 'H·ªçc k·ª≥ 2'],
    [6, 'C∆° s·ªü d·ªØ li·ªáu', 3, 8.9, 'H·ªçc k·ª≥ 2'],
  ];
  
  const sheet = XLSX.utils.aoa_to_sheet(sampleData);
  sheet['!cols'] = [
    { wch: 5 },   // STT
    { wch: 25 },  // T√™n m√¥n h·ªçc
    { wch: 8 },   // T√≠n ch·ªâ
    { wch: 10 },  // ƒêi·ªÉm s·ªë
    { wch: 15 },  // H·ªçc k·ª≥
  ];
  
  XLSX.utils.book_append_sheet(workbook, sheet, 'Danh s√°ch m√¥n');
  
  // Xu·∫•t file
  XLSX.writeFile(workbook, 'sample-import.xlsx');
  console.log('‚úÖ ƒê√£ t·∫°o file sample-import.xlsx ƒë·ªÉ test import');
}

// Export d·ªØ li·ªáu ra file Excel ƒë∆°n gi·∫£n ƒë·ªÉ d·ªÖ import
export function exportSimpleExcel(data: StudentRecord): void {
  const workbook = XLSX.utils.book_new();
  
  // T·∫°o data gi·ªëng h·ªát file m·∫´u
  const simpleData = [
    ['üìã B·∫¢NG ƒêI·ªÇM SINH VI√äN', '', '', '', ''],
    ['', '', '', '', ''],
    ['STT', 'T√™n m√¥n h·ªçc', 'T√≠n ch·ªâ', 'ƒêi·ªÉm s·ªë', 'H·ªçc k·ª≥'],
  ];
  
  let stt = 1;
  data.semesters.forEach((semester) => {
    semester.subjects.forEach((subject) => {
      simpleData.push([
        stt.toString(),
        subject.name,
        subject.credits.toString(),
        subject.grade !== null ? subject.grade.toFixed(1) : '',
        semester.name
      ]);
      stt++;
    });
  });
  
  const sheet = XLSX.utils.aoa_to_sheet(simpleData);
  sheet['!cols'] = [
    { wch: 5 },   // STT
    { wch: 35 },  // T√™n m√¥n h·ªçc
    { wch: 8 },   // T√≠n ch·ªâ
    { wch: 10 },  // ƒêi·ªÉm s·ªë
    { wch: 15 },  // H·ªçc k·ª≥
  ];
  
  XLSX.utils.book_append_sheet(workbook, sheet, 'Danh s√°ch m√¥n');
  
  // Xu·∫•t file
  const fileName = `bangdiem-simple-${data.studentName.replace(/\s+/g, '_')}-${new Date().toISOString().split('T')[0]}.xlsx`;
  XLSX.writeFile(workbook, fileName);
  console.log('‚úÖ ƒê√£ xu·∫•t file Excel ƒë∆°n gi·∫£n:', fileName);
}

// Export th·ªùi kh√≥a bi·ªÉu ra Excel
export function exportScheduleToExcel(data: StudentRecord, semesterIndex?: number): void {
  const wb = XLSX.utils.book_new();
  
  // Khung gi·ªù chu·∫©n
  const timeSlots = [
    { period: 1, startTime: '07:00', endTime: '07:50' },
    { period: 2, startTime: '08:00', endTime: '08:50' },
    { period: 3, startTime: '09:00', endTime: '09:50' },
    { period: 4, startTime: '10:00', endTime: '10:50' },
    { period: 5, startTime: '11:00', endTime: '11:50' },
    { period: 6, startTime: '13:00', endTime: '13:50' },
    { period: 7, startTime: '14:00', endTime: '14:50' },
    { period: 8, startTime: '15:00', endTime: '15:50' },
    { period: 9, startTime: '16:00', endTime: '16:50' },
    { period: 10, startTime: '17:00', endTime: '17:50' },
    { period: 11, startTime: '18:00', endTime: '18:50' },
    { period: 12, startTime: '19:00', endTime: '19:50' },
  ];

  const days = [
    { key: 1, name: 'Th·ª© 2', short: 'T2' },
    { key: 2, name: 'Th·ª© 3', short: 'T3' },
    { key: 3, name: 'Th·ª© 4', short: 'T4' },
    { key: 4, name: 'Th·ª© 5', short: 'T5' },
    { key: 5, name: 'Th·ª© 6', short: 'T6' },
    { key: 6, name: 'Th·ª© 7', short: 'T7' },
    { key: 0, name: 'Ch·ªß nh·∫≠t', short: 'CN' },
  ];

  const classTypes = {
    'lecture': 'L√Ω thuy·∫øt',
    'lab': 'Th·ª±c h√†nh', 
    'tutorial': 'B√†i t·∫≠p',
    'exam': 'Thi/KT'
  };

  // L·∫•y danh s√°ch h·ªçc k·ª≥ c·∫ßn export
  const semestersToExport = semesterIndex !== undefined 
    ? [data.semesters[semesterIndex]]
    : data.semesters;

  semestersToExport.forEach((semester, index) => {
    // T·∫°o l∆∞·ªõi th·ªùi kh√≥a bi·ªÉu
    const scheduleGrid: string[][] = [];
    
    // Header row
    const headerRow = ['Ti·∫øt / Th·ª©', ...days.map(d => d.name)];
    scheduleGrid.push(headerRow);
    
    // T·∫°o ma tr·∫≠n th·ªùi kh√≥a bi·ªÉu
    timeSlots.forEach(slot => {
      const row = [`Ti·∫øt ${slot.period}\n(${slot.startTime}-${slot.endTime})`];
      
      days.forEach(day => {
        let cellContent = '';
        
        // T√¨m c√°c m√¥n h·ªçc trong khung gi·ªù n√†y
        semester.subjects.forEach(subject => {
          if (subject.schedule) {
            subject.schedule.forEach(classSchedule => {
              if (classSchedule.dayOfWeek === day.key) {
                // Ki·ªÉm tra xem l·ªãch n√†y c√≥ trong khung gi·ªù hi·ªán t·∫°i kh√¥ng
                const scheduleStartTime = classSchedule.startTime;
                const scheduleEndTime = classSchedule.endTime;
                
                // N·∫øu khung gi·ªù n√†y n·∫±m trong kho·∫£ng th·ªùi gian c·ªßa l·ªãch h·ªçc
                if (scheduleStartTime <= slot.startTime && slot.endTime <= scheduleEndTime) {
                  const typeText = classTypes[classSchedule.type as keyof typeof classTypes] || classSchedule.type;
                  const roomText = classSchedule.room ? ` - ${classSchedule.room}` : '';
                  const instructorText = classSchedule.instructor ? `\nGV: ${classSchedule.instructor}` : '';
                  
                  cellContent += `${subject.name} (${typeText})${roomText}${instructorText}\n`;
                }
              }
            });
          }
        });
        
        row.push(cellContent.trim() || '');
      });
      
      scheduleGrid.push(row);
    });
    
    // T·∫°o worksheet cho th·ªùi kh√≥a bi·ªÉu l∆∞·ªõi
    const wsGrid = XLSX.utils.aoa_to_sheet(scheduleGrid);
    
    // Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt
    wsGrid['!cols'] = [
      { wch: 15 }, // C·ªôt ti·∫øt h·ªçc
      { wch: 25 }, // Th·ª© 2
      { wch: 25 }, // Th·ª© 3
      { wch: 25 }, // Th·ª© 4
      { wch: 25 }, // Th·ª© 5
      { wch: 25 }, // Th·ª© 6
      { wch: 25 }, // Th·ª© 7
      { wch: 25 }, // Ch·ªß nh·∫≠t
    ];

    // Thi·∫øt l·∫≠p chi·ªÅu cao h√†ng
    wsGrid['!rows'] = scheduleGrid.map(() => ({ hpt: 60 }));
    
    const gridSheetName = semesterIndex !== undefined 
      ? `TKB L∆∞·ªõi`
      : `TKB L∆∞·ªõi - ${semester.name}`;
    XLSX.utils.book_append_sheet(wb, wsGrid, gridSheetName);

    // T·∫°o sheet danh s√°ch chi ti·∫øt
    const detailData: any[] = [];
    
    semester.subjects.forEach(subject => {
      if (subject.schedule && subject.schedule.length > 0) {
        subject.schedule.forEach(classSchedule => {
          const dayName = days.find(d => d.key === classSchedule.dayOfWeek)?.name || 'Kh√¥ng x√°c ƒë·ªãnh';
          const typeText = classTypes[classSchedule.type as keyof typeof classTypes] || classSchedule.type;
          
          detailData.push({
            'T√™n m√¥n h·ªçc': subject.name,
            'T√≠n ch·ªâ': subject.credits,
            'Th·ª©': dayName,
            'Gi·ªù b·∫Øt ƒë·∫ßu': classSchedule.startTime,
            'Gi·ªù k·∫øt th√∫c': classSchedule.endTime,
            'Ph√≤ng h·ªçc': classSchedule.room || '',
            'T√≤a nh√†': classSchedule.building || '',
            'Lo·∫°i ti·∫øt': typeText,
            'Gi·∫£ng vi√™n': classSchedule.instructor || '',
            'Ghi ch√∫': classSchedule.note || ''
          });
        });
      }
    });

    if (detailData.length > 0) {
      const wsDetail = XLSX.utils.json_to_sheet(detailData);
      wsDetail['!cols'] = [
        { wch: 25 }, // T√™n m√¥n h·ªçc
        { wch: 8 },  // T√≠n ch·ªâ
        { wch: 10 }, // Th·ª©
        { wch: 12 }, // Gi·ªù b·∫Øt ƒë·∫ßu
        { wch: 12 }, // Gi·ªù k·∫øt th√∫c
        { wch: 15 }, // Ph√≤ng h·ªçc
        { wch: 15 }, // T√≤a nh√†
        { wch: 12 }, // Lo·∫°i ti·∫øt
        { wch: 20 }, // Gi·∫£ng vi√™n
        { wch: 20 }  // Ghi ch√∫
      ];
      
      const detailSheetName = semesterIndex !== undefined 
        ? `TKB Chi ti·∫øt`
        : `TKB Chi ti·∫øt - ${semester.name}`;
      XLSX.utils.book_append_sheet(wb, wsDetail, detailSheetName);
    }
  });

  // T·∫°o sheet th·ªëng k√™
  const statsData = [
    ['üìÖ TH·ªêNG K√ä TH·ªúI KH√ìA BI·ªÇU', ''],
    ['Sinh vi√™n:', data.studentName || 'Sinh vi√™n'],
    ['Ng√†y xu·∫•t:', new Date().toLocaleDateString('vi-VN')],
    ['', ''],
    ['Th·ªëng k√™ theo h·ªçc k·ª≥:', ''],
    ['H·ªçc k·ª≥', 'S·ªë m√¥n', 'S·ªë l·ªãch h·ªçc', 'S·ªë ti·∫øt/tu·∫ßn'],
  ];

  semestersToExport.forEach(semester => {
    const totalSchedules = semester.subjects.reduce((total, subject) => 
      total + (subject.schedule?.length || 0), 0
    );
    
    // T√≠nh s·ªë ti·∫øt trong tu·∫ßn (m·ªói l·ªãch h·ªçc l√† 1 kho·∫£ng th·ªùi gian, c√≥ th·ªÉ nhi·ªÅu ti·∫øt)
    const totalPeriods = semester.subjects.reduce((total, subject) => {
      if (subject.schedule) {
        return total + subject.schedule.reduce((subTotal, schedule) => {
          // T√≠nh s·ªë ti·∫øt d·ª±a tr√™n kho·∫£ng th·ªùi gian
          const startTime = schedule.startTime;
          const endTime = schedule.endTime;
          
          const getMinutes = (timeStr: string) => {
            const [hours, minutes] = timeStr.split(':').map(Number);
            return hours * 60 + minutes;
          };
          
          const duration = getMinutes(endTime) - getMinutes(startTime);
          const periods = Math.ceil(duration / 50); // M·ªói ti·∫øt 50 ph√∫t
          
          return subTotal + periods;
        }, 0);
      }
      return total;
    }, 0);

    statsData.push([
      semester.name,
      semester.subjects.length.toString(),
      totalSchedules.toString(),
      totalPeriods.toString()
    ]);
  });

  const wsStats = XLSX.utils.aoa_to_sheet(statsData);
  wsStats['!cols'] = [{ wch: 20 }, { wch: 15 }, { wch: 15 }, { wch: 15 }];
  XLSX.utils.book_append_sheet(wb, wsStats, 'Th·ªëng k√™');

  // Xu·∫•t file
  const semesterText = semesterIndex !== undefined 
    ? `_${semestersToExport[0].name.replace(/[^a-zA-Z0-9]/g, '')}`
    : '_TatCaHocKy';
  
  const fileName = `ThoiKhoaBieu_${data.studentName || 'SinhVien'}${semesterText}_${new Date().toISOString().split('T')[0]}.xlsx`;
  XLSX.writeFile(wb, fileName);
  
  console.log('‚úÖ ƒê√£ xu·∫•t th·ªùi kh√≥a bi·ªÉu ra Excel:', fileName);
}

// Export d·ªØ li·ªáu ra file Excel v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
export function exportToExcel(data: StudentRecord): void {
  const workbook = XLSX.utils.book_new();
  const cumulativeGPA = calculateCumulativeGPA(data.semesters);
  const academicLevel = getAcademicLevel(cumulativeGPA);
  
  // 1. SHEET T·ªîNG QUAN - Th√¥ng tin t·ªïng qu√°t
  const summaryData = [
    ['üìä B·∫¢NG ƒêI·ªÇM SINH VI√äN', '', '', '', '', '', ''],
    ['', '', '', '', '', '', ''],
    ['Th√¥ng tin sinh vi√™n:', '', '', '', '', '', ''],
    ['T√™n sinh vi√™n:', data.studentName, '', '', '', '', ''],
    ['Ng√†y xu·∫•t b√°o c√°o:', new Date().toLocaleDateString('vi-VN'), '', '', '', '', ''],
    ['Th·ªùi gian xu·∫•t:', new Date().toLocaleTimeString('vi-VN'), '', '', '', '', ''],
    ['', '', '', '', '', '', ''],
    ['üìà TH·ªêNG K√ä T·ªîNG QUAN:', '', '', '', '', '', ''],
    ['GPA t√≠ch l≈©y:', cumulativeGPA.toFixed(3), '', '', '', '', ''],
    ['X·∫øp lo·∫°i h·ªçc l·ª±c:', academicLevel.level, '', '', '', '', ''],
    ['T·ªïng s·ªë h·ªçc k·ª≥:', data.semesters.length.toString(), '', '', '', '', ''],
    ['T·ªïng s·ªë m√¥n ƒë√£ h·ªçc:', data.semesters.reduce((total, sem) => 
      total + sem.subjects.filter(s => s.grade !== null).length, 0).toString(), '', '', '', '', ''],
    ['T·ªïng t√≠n ch·ªâ t√≠ch l≈©y:', data.semesters.reduce((total, sem) => 
      total + sem.subjects.reduce((semTotal, sub) => 
        sub.grade !== null ? semTotal + sub.credits : semTotal, 0), 0).toString(), '', '', '', '', ''],
  ];
  
  const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
  summarySheet['!cols'] = Array(7).fill({ wch: 20 });
  XLSX.utils.book_append_sheet(workbook, summarySheet, 'T·ªïng quan');
  
  // 2. SHEET DANH S√ÅCH M√îN - ƒê·ªãnh d·∫°ng ƒë∆°n gi·∫£n nh∆∞ file m·∫´u
  const allSubjectsData = [
    ['üìã DANH S√ÅCH T·∫§T C·∫¢ C√ÅC M√îN H·ªåC', '', '', '', ''],
    ['', '', '', '', ''],
    ['STT', 'T√™n m√¥n h·ªçc', 'T√≠n ch·ªâ', 'ƒêi·ªÉm s·ªë', 'H·ªçc k·ª≥'],
  ];
  
  let stt = 1;
  data.semesters.forEach((semester) => {
    semester.subjects.forEach((subject) => {
      allSubjectsData.push([
        stt.toString(),
        subject.name,
        subject.credits.toString(),
        subject.grade !== null ? subject.grade.toFixed(1) : '',
        semester.name
      ]);
      stt++;
    });
  });
  
  const allSubjectsSheet = XLSX.utils.aoa_to_sheet(allSubjectsData);
  allSubjectsSheet['!cols'] = [
    { wch: 5 },   // STT
    { wch: 35 },  // T√™n m√¥n h·ªçc
    { wch: 8 },   // T√≠n ch·ªâ
    { wch: 10 },  // ƒêi·ªÉm s·ªë
    { wch: 15 },  // H·ªçc k·ª≥
  ];
  XLSX.utils.book_append_sheet(workbook, allSubjectsSheet, 'Danh s√°ch m√¥n');
  
  // Xu·∫•t file
  const fileName = `BangDiem_${data.studentName}_${new Date().toISOString().split('T')[0]}.xlsx`;
  XLSX.writeFile(workbook, fileName);
  
  console.log('‚úÖ ƒê√£ xu·∫•t file Excel v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin:', fileName);
}

// C·∫£i thi·ªán ch·ª©c nƒÉng l∆∞u tr·ªØ localStorage v·ªõi backup
export function saveDataWithBackup(data: StudentRecord): void {
  try {
    // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
    if (!data || !data.id || !data.semesters) {
      console.error('‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, b·ªè qua vi·ªác l∆∞u');
      return;
    }

    const dataString = JSON.stringify(data);
    
    // L∆∞u d·ªØ li·ªáu ch√≠nh
    localStorage.setItem(STORAGE_KEY, dataString);
    
    // T·∫°o backup v·ªõi timestamp (ch·ªâ t·∫°o backup m·ªói 30 gi√¢y ƒë·ªÉ tr√°nh spam)
    const now = Date.now();
    const lastBackupKey = `${STORAGE_KEY}_last_backup_time`;
    const lastBackupTime = localStorage.getItem(lastBackupKey);
    
    if (!lastBackupTime || (now - parseInt(lastBackupTime)) > 30000) {
      const backupKey = `${STORAGE_KEY}_backup_${now}`;
      localStorage.setItem(backupKey, dataString);
      localStorage.setItem(lastBackupKey, now.toString());
      
      // Gi·ªØ ch·ªâ 5 backup g·∫ßn nh·∫•t
      const allKeys = Object.keys(localStorage);
      const backupKeys = allKeys
        .filter(key => key.startsWith(`${STORAGE_KEY}_backup_`))
        .sort()
        .reverse();
      
      // X√≥a backup c≈© n·∫øu c√≥ qu√° 5 backup
      backupKeys.slice(5).forEach(key => {
        localStorage.removeItem(key);
      });
      
      console.log('‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v·ªõi backup m·ªõi');
    } else {
      console.log('üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng');
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu:', error);
    // Fallback v·ªÅ h√†m saveData c≈©
    try {
      saveData(data);
      console.log('‚úÖ ƒê√£ l∆∞u b·∫±ng ph∆∞∆°ng th·ª©c fallback');
    } catch (fallbackError) {
      console.error('‚ùå L·ªói c·∫£ fallback:', fallbackError);
    }
  }
}

// Kh√¥i ph·ª•c t·ª´ backup
export function restoreFromBackup(): StudentRecord[] {
  try {
    const allKeys = Object.keys(localStorage);
    const backupKeys = allKeys
      .filter(key => key.startsWith(`${STORAGE_KEY}_backup_`))
      .sort()
      .reverse();
    
    const backups: StudentRecord[] = [];
    backupKeys.forEach(key => {
      try {
        const data = localStorage.getItem(key);
        if (data) {
          const backup = JSON.parse(data);
          backup._backupDate = new Date(parseInt(key.split('_').pop() || '0')).toLocaleString('vi-VN');
          backup._backupKey = key; // Th√™m key ƒë·ªÉ c√≥ th·ªÉ x√≥a backup
          backups.push(backup);
        }
      } catch (error) {
        console.error('L·ªói khi ƒë·ªçc backup:', key, error);
      }
    });
    
    return backups;
  } catch (error) {
    console.error('L·ªói khi kh√¥i ph·ª•c backup:', error);
    return [];
  }
}

// Th·ªëng k√™ s·ª≠ d·ª•ng localStorage
export function getStorageStats(): { 
  dataSize: string; 
  backupCount: number; 
  totalSize: string;
  lastSaved: string;
} {
  try {
    let totalBytes = 0;
    let dataBytes = 0;
    let backupCount = 0;
    let lastSaved = 'Ch∆∞a c√≥ d·ªØ li·ªáu';
    
    const allKeys = Object.keys(localStorage);
    
    allKeys.forEach(key => {
      const data = localStorage.getItem(key);
      if (data) {
        const size = new Blob([data]).size;
        totalBytes += size;
        
        if (key === STORAGE_KEY) {
          dataBytes = size;
          try {
            const parsed = JSON.parse(data);
            lastSaved = new Date().toLocaleString('vi-VN'); // Hi·ªán t·∫°i ch∆∞a l∆∞u timestamp trong data
          } catch (error) {
            // ignore
          }
        } else if (key.startsWith(`${STORAGE_KEY}_backup_`)) {
          backupCount++;
        }
      }
    });
    
    return {
      dataSize: formatBytes(dataBytes),
      backupCount,
      totalSize: formatBytes(totalBytes),
      lastSaved
    };
  } catch (error) {
    console.error('L·ªói khi l·∫•y th·ªëng k√™:', error);
    return {
      dataSize: '0 B',
      backupCount: 0,
      totalSize: '0 B',
      lastSaved: 'L·ªói'
    };
  }
}

// Helper function ƒë·ªÉ format bytes
function formatBytes(bytes: number): string {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
} 