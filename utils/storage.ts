import { StudentRecord, Semester, Subject } from '@/types';
import * as XLSX from 'xlsx';
import { calculateSemesterGPA, calculateCumulativeGPA, getLetterGrade, getAcademicLevel, convertGradeToGPA } from './gpa';

const STORAGE_KEY = 'simulate-gpa-data';

// L∆∞u d·ªØ li·ªáu v√†o localStorage
export function saveData(data: StudentRecord): void {
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
  } catch (error) {
    console.error('L·ªói khi l∆∞u d·ªØ li·ªáu:', error);
  }
}

// L·∫•y d·ªØ li·ªáu t·ª´ localStorage
export function loadData(): StudentRecord | null {
  try {
    const data = localStorage.getItem(STORAGE_KEY);
    if (data) {
      const parsed = JSON.parse(data);
      
      // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu
      if (!parsed.id || !parsed.semesters || !Array.isArray(parsed.semesters)) {
        console.warn('‚ö†Ô∏è D·ªØ li·ªáu trong localStorage kh√¥ng h·ª£p l·ªá, th·ª≠ kh√¥i ph·ª•c t·ª´ backup');
        return tryRestoreFromBackup();
      }
      
      console.log('‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ localStorage th√†nh c√¥ng');
      return parsed;
    }
    
    console.log('‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong localStorage');
    return null;
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ localStorage:', error);
    console.log('üîÑ Th·ª≠ kh√¥i ph·ª•c t·ª´ backup...');
    return tryRestoreFromBackup();
  }
}

// Th·ª≠ kh√¥i ph·ª•c t·ª´ backup khi d·ªØ li·ªáu ch√≠nh b·ªã l·ªói
function tryRestoreFromBackup(): StudentRecord | null {
  try {
    const backups = restoreFromBackup();
    if (backups.length > 0) {
      const latestBackup = backups[0];
      console.log('‚úÖ ƒê√£ kh√¥i ph·ª•c t·ª´ backup th√†nh c√¥ng');
      return latestBackup;
    }
    console.log('‚ö†Ô∏è Kh√¥ng c√≥ backup ƒë·ªÉ kh√¥i ph·ª•c');
    return null;
  } catch (error) {
    console.error('‚ùå L·ªói khi kh√¥i ph·ª•c backup:', error);
    return null;
  }
}

// T·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
export function createDefaultData(): StudentRecord {
  return {
    id: 'student-1',
    studentName: 'Sinh vi√™n',
    semesters: [
      {
        id: 'semester-1',
        name: 'H·ªçc k·ª≥ hi·ªán t·∫°i',
        subjects: [
          {
            id: 'subject-1',
            name: 'To√°n cao c·∫•p',
            credits: 3,
            grade: null,
          },
        ],
        gpa: 0,
      },
    ],
    cumulativeGPA: 0,
    totalCredits: 0,
    completedCredits: 0,
  };
}

// Export d·ªØ li·ªáu ra file
export function exportData(data: StudentRecord): void {
  const dataStr = JSON.stringify(data, null, 2);
  const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
  
  const exportFileDefaultName = `gpa-data-${new Date().toISOString().split('T')[0]}.json`;
  
  const linkElement = document.createElement('a');
  linkElement.setAttribute('href', dataUri);
  linkElement.setAttribute('download', exportFileDefaultName);
  linkElement.click();
}

// Import d·ªØ li·ªáu t·ª´ file
export function importData(file: File): Promise<StudentRecord> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const result = e.target?.result as string;
        const data = JSON.parse(result) as StudentRecord;
        
        // Validate data structure
        if (!data.id || !data.semesters || !Array.isArray(data.semesters)) {
          throw new Error('File kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
        }
        
        resolve(data);
      } catch (error) {
        reject(new Error('L·ªói khi ƒë·ªçc file: ' + (error as Error).message));
      }
    };
    reader.onerror = () => reject(new Error('L·ªói khi ƒë·ªçc file'));
    reader.readAsText(file);
  });
}

// Clear all data
export function clearData(): void {
  try {
    localStorage.removeItem(STORAGE_KEY);
  } catch (error) {
    console.error('L·ªói khi x√≥a d·ªØ li·ªáu:', error);
  }
}

// Generate unique ID
export function generateId(): string {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

// Export d·ªØ li·ªáu ra file Excel v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
export function exportToExcel(data: StudentRecord): void {
  const workbook = XLSX.utils.book_new();
  const cumulativeGPA = calculateCumulativeGPA(data.semesters);
  const academicLevel = getAcademicLevel(cumulativeGPA);
  
  // 1. SHEET T·ªîNG QUAN - Th√¥ng tin t·ªïng qu√°t
  const summaryData = [
    ['üìä B·∫¢NG ƒêI·ªÇM SINH VI√äN', '', '', '', '', '', ''],
    ['', '', '', '', '', '', ''],
    ['Th√¥ng tin sinh vi√™n:', '', '', '', '', '', ''],
    ['T√™n sinh vi√™n:', data.studentName, '', '', '', '', ''],
    ['Ng√†y xu·∫•t b√°o c√°o:', new Date().toLocaleDateString('vi-VN'), '', '', '', '', ''],
    ['Th·ªùi gian xu·∫•t:', new Date().toLocaleTimeString('vi-VN'), '', '', '', '', ''],
    ['', '', '', '', '', '', ''],
    ['üìà TH·ªêNG K√ä T·ªîNG QUAN:', '', '', '', '', '', ''],
    ['GPA t√≠ch l≈©y:', cumulativeGPA.toFixed(3), '', '', '', '', ''],
    ['X·∫øp lo·∫°i h·ªçc l·ª±c:', academicLevel.level, '', '', '', '', ''],
    ['T·ªïng s·ªë h·ªçc k·ª≥:', data.semesters.length.toString(), '', '', '', '', ''],
    ['T·ªïng s·ªë m√¥n ƒë√£ h·ªçc:', data.semesters.reduce((total, sem) => 
      total + sem.subjects.filter(s => s.grade !== null).length, 0).toString(), '', '', '', '', ''],
    ['T·ªïng t√≠n ch·ªâ t√≠ch l≈©y:', data.semesters.reduce((total, sem) => 
      total + sem.subjects.reduce((semTotal, sub) => 
        sub.grade !== null ? semTotal + sub.credits : semTotal, 0), 0).toString(), '', '', '', '', ''],
    ['', '', '', '', '', '', ''],
    ['üéØ PH√ÇN T√çCH ƒêI·ªÇM S·ªê:', '', '', '', '', '', ''],
  ];
  
  // Th·ªëng k√™ ph√¢n b·ªë ƒëi·ªÉm theo grade
  const gradeStats: { [key: string]: number } = {};
  const allGradedSubjects = data.semesters.flatMap(sem => 
    sem.subjects.filter(sub => sub.grade !== null)
  );
  
  allGradedSubjects.forEach(subject => {
    if (subject.grade !== null) {
      const letterGrade = getLetterGrade(subject.grade);
      gradeStats[letterGrade] = (gradeStats[letterGrade] || 0) + 1;
    }
  });
  
  Object.entries(gradeStats).forEach(([grade, count]) => {
    summaryData.push([`S·ªë m√¥n ƒë·∫°t ${grade}:`, count.toString(), 
      `(${((count / allGradedSubjects.length) * 100).toFixed(1)}%)`, '', '', '', '']);
  });
  
  // ƒêi·ªÉm cao nh·∫•t v√† th·∫•p nh·∫•t
  const allGrades = allGradedSubjects.map(s => s.grade!);
  if (allGrades.length > 0) {
    summaryData.push(['', '', '', '', '', '', '']);
    summaryData.push(['ƒêi·ªÉm cao nh·∫•t:', Math.max(...allGrades).toFixed(1), '', '', '', '', '']);
    summaryData.push(['ƒêi·ªÉm th·∫•p nh·∫•t:', Math.min(...allGrades).toFixed(1), '', '', '', '', '']);
    summaryData.push(['ƒêi·ªÉm trung b√¨nh:', (allGrades.reduce((a, b) => a + b, 0) / allGrades.length).toFixed(1), '', '', '', '', '']);
  }
  
  const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
  summarySheet['!cols'] = Array(7).fill({ wch: 20 });
  XLSX.utils.book_append_sheet(workbook, summarySheet, 'T·ªïng quan');
  
  // 2. SHEET T·∫§T C·∫¢ C√ÅC M√îN - Danh s√°ch ƒë·∫ßy ƒë·ªß
  const allSubjectsData = [
    ['üìã DANH S√ÅCH T·∫§T C·∫¢ C√ÅC M√îN H·ªåC', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', ''],
    ['STT', 'H·ªçc k·ª≥', 'T√™n m√¥n h·ªçc', 'T√≠n ch·ªâ', 'ƒêi·ªÉm s·ªë', 'ƒêi·ªÉm ch·ªØ', 'GPA Point', 'ƒêi·ªÉm √ó T√≠n ch·ªâ', 'Tr·∫°ng th√°i'],
  ];
  
  let stt = 1;
  data.semesters.forEach((semester) => {
    semester.subjects.forEach((subject) => {
      const grade = subject.grade;
      const letterGrade = grade !== null ? getLetterGrade(grade) : 'Ch∆∞a c√≥ ƒëi·ªÉm';
      const gpaPoint = grade !== null ? convertGradeToGPA(grade).toFixed(1) : '0.0';
      const weightedPoints = grade !== null ? (grade * subject.credits).toFixed(1) : '0.0';
      const status = grade !== null ? 
        (grade >= 5.0 ? '‚úÖ ƒê·∫°t' : '‚ùå Kh√¥ng ƒë·∫°t') : '‚è≥ Ch∆∞a c√≥ ƒëi·ªÉm';
      
      allSubjectsData.push([
        stt.toString(),
        semester.name,
        subject.name,
        subject.credits.toString(),
        grade !== null ? grade.toFixed(1) : '',
        letterGrade,
        gpaPoint,
        weightedPoints,
        status
      ]);
      stt++;
    });
  });
  
  const allSubjectsSheet = XLSX.utils.aoa_to_sheet(allSubjectsData);
  allSubjectsSheet['!cols'] = [
    { wch: 5 },   // STT
    { wch: 15 },  // H·ªçc k·ª≥
    { wch: 30 },  // T√™n m√¥n
    { wch: 8 },   // T√≠n ch·ªâ
    { wch: 10 },  // ƒêi·ªÉm s·ªë
    { wch: 10 },  // ƒêi·ªÉm ch·ªØ
    { wch: 10 },  // GPA Point
    { wch: 12 },  // ƒêi·ªÉm √ó T√≠n ch·ªâ
    { wch: 15 },  // Tr·∫°ng th√°i
  ];
  XLSX.utils.book_append_sheet(workbook, allSubjectsSheet, 'T·∫•t c·∫£ c√°c m√¥n');
  
  // 3. SHEET CHO T·ª™NG H·ªåC K·ª≤ - Chi ti·∫øt t·ª´ng h·ªçc k·ª≥
  data.semesters.forEach((semester, index) => {
    const semesterData = [
      [`üìö ${semester.name.toUpperCase()}`, '', '', '', '', '', '', ''],
      ['', '', '', '', '', '', '', ''],
      ['STT', 'T√™n m√¥n h·ªçc', 'T√≠n ch·ªâ', 'ƒêi·ªÉm s·ªë', 'ƒêi·ªÉm ch·ªØ', 'GPA Point', 'ƒêi·ªÉm √ó T√≠n ch·ªâ', 'Ghi ch√∫'],
    ];
    
    semester.subjects.forEach((subject, idx) => {
      const grade = subject.grade;
      const letterGrade = grade !== null ? getLetterGrade(grade) : '';
      const gpaPoint = grade !== null ? convertGradeToGPA(grade).toFixed(1) : '';
      const weightedPoints = grade !== null ? (grade * subject.credits).toFixed(1) : '';
      const note = grade !== null ? 
        (grade >= 8.5 ? 'üèÜ Xu·∫•t s·∫Øc' : 
         grade >= 7.0 ? 'üëç T·ªët' : 
         grade >= 5.5 ? 'üìö Kh√°' : 
         grade >= 4.0 ? '‚ö†Ô∏è Y·∫øu' : '‚ùå K√©m') : 'Ch∆∞a c√≥ ƒëi·ªÉm';
      
      semesterData.push([
        (idx + 1).toString(),
        subject.name,
        subject.credits.toString(),
        grade !== null ? grade.toFixed(1) : '',
        letterGrade,
        gpaPoint,
        weightedPoints,
        note
      ]);
    });
    
    // Th·ªëng k√™ h·ªçc k·ª≥
    const semesterGPA = calculateSemesterGPA(semester.subjects);
    const completedSubjects = semester.subjects.filter(s => s.grade !== null);
    const totalCredits = completedSubjects.reduce((total, sub) => total + sub.credits, 0);
    const totalWeightedGrades = completedSubjects.reduce((total, sub) => 
      total + (sub.grade! * sub.credits), 0);
    const averageGrade = totalCredits > 0 ? totalWeightedGrades / totalCredits : 0;
    
    semesterData.push(['', '', '', '', '', '', '', '']);
    semesterData.push(['TH·ªêNG K√ä H·ªåC K·ª≤:', '', '', '', '', '', '', '']);
    semesterData.push(['S·ªë m√¥n ƒë√£ ho√†n th√†nh:', completedSubjects.length.toString(), '', '', '', '', '', '']);
    semesterData.push(['T·ªïng t√≠n ch·ªâ:', totalCredits.toString(), '', '', '', '', '', '']);
    semesterData.push(['ƒêi·ªÉm trung b√¨nh (thang 10):', averageGrade.toFixed(2), '', '', '', '', '', '']);
    semesterData.push(['GPA h·ªçc k·ª≥ (thang 4):', semesterGPA.toFixed(3), '', '', '', '', '', '']);
    semesterData.push(['X·∫øp lo·∫°i:', getAcademicLevel(semesterGPA).level, '', '', '', '', '', '']);
    
    const sheet = XLSX.utils.aoa_to_sheet(semesterData);
    sheet['!cols'] = [
      { wch: 5 },   // STT
      { wch: 30 },  // T√™n m√¥n
      { wch: 8 },   // T√≠n ch·ªâ
      { wch: 10 },  // ƒêi·ªÉm s·ªë
      { wch: 10 },  // ƒêi·ªÉm ch·ªØ
      { wch: 10 },  // GPA Point
      { wch: 12 },  // ƒêi·ªÉm √ó T√≠n ch·ªâ
      { wch: 15 },  // Ghi ch√∫
    ];
    
    XLSX.utils.book_append_sheet(workbook, sheet, `HK${index + 1}_${semester.name.substring(0, 10)}`);
  });
  
  // 4. SHEET B√ÅO C√ÅO TI·∫æN ƒê·ªò - So s√°nh qua c√°c h·ªçc k·ª≥
  const progressData = [
    ['üìà B√ÅO C√ÅO TI·∫æN ƒê·ªò H·ªåC T·∫¨P', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', ''],
    ['H·ªçc k·ª≥', 'S·ªë m√¥n', 'T√≠n ch·ªâ', 'ƒêi·ªÉm TB', 'GPA HK', 'GPA t√≠ch l≈©y', 'X·∫øp lo·∫°i', 'Xu h∆∞·ªõng', 'Ghi ch√∫'],
  ];
  
  let prevCumulativeGPA = 0;
  data.semesters.forEach((semester, index) => {
    const semesterGPA = calculateSemesterGPA(semester.subjects);
    const semesterCredits = semester.subjects.reduce((total, sub) => 
      sub.grade !== null ? total + sub.credits : total, 0);
    
    // T√≠nh GPA t√≠ch l≈©y ƒë·∫øn h·ªçc k·ª≥ hi·ªán t·∫°i
    const semestersUpToNow = data.semesters.slice(0, index + 1);
    const currentCumulativeGPA = calculateCumulativeGPA(semestersUpToNow);
    const academicLevel = getAcademicLevel(currentCumulativeGPA);
    
    // T√≠nh ƒëi·ªÉm trung b√¨nh thang 10
    const completedSubjects = semester.subjects.filter(s => s.grade !== null);
    const averageGrade = completedSubjects.length > 0 ? 
      completedSubjects.reduce((total, sub) => total + (sub.grade! * sub.credits), 0) / 
      completedSubjects.reduce((total, sub) => total + sub.credits, 0) : 0;
    
    // X√°c ƒë·ªãnh xu h∆∞·ªõng
    let trend = 'üÜï M·ªõi';
    if (index > 0) {
      if (currentCumulativeGPA > prevCumulativeGPA) {
        trend = 'üìà TƒÉng';
      } else if (currentCumulativeGPA < prevCumulativeGPA) {
        trend = 'üìâ Gi·∫£m';
      } else {
        trend = '‚û°Ô∏è ·ªîn ƒë·ªãnh';
      }
    }
    
    // Ghi ch√∫ ƒë·∫∑c bi·ªát
    let note = '';
    if (semesterGPA >= 3.7) note = 'üèÜ Xu·∫•t s·∫Øc';
    else if (semesterGPA >= 3.3) note = 'üåü Gi·ªèi';
    else if (semesterGPA >= 2.3) note = 'üëç Kh√°';
    else if (semesterGPA >= 2.0) note = 'üìö Trung b√¨nh';
    else if (semesterGPA >= 1.0) note = '‚ö†Ô∏è Y·∫øu';
    else note = '‚ùå K√©m';
    
    progressData.push([
      semester.name,
      completedSubjects.length.toString(),
      semesterCredits.toString(),
      averageGrade.toFixed(2),
      semesterGPA.toFixed(3),
      currentCumulativeGPA.toFixed(3),
      academicLevel.level,
      trend,
      note
    ]);
    
    prevCumulativeGPA = currentCumulativeGPA;
  });
  
  const progressSheet = XLSX.utils.aoa_to_sheet(progressData);
  progressSheet['!cols'] = [
    { wch: 15 }, // H·ªçc k·ª≥
    { wch: 8 },  // S·ªë m√¥n
    { wch: 8 },  // T√≠n ch·ªâ
    { wch: 10 }, // ƒêi·ªÉm TB
    { wch: 10 }, // GPA HK
    { wch: 12 }, // GPA t√≠ch l≈©y
    { wch: 12 }, // X·∫øp lo·∫°i
    { wch: 10 }, // Xu h∆∞·ªõng
    { wch: 15 }, // Ghi ch√∫
  ];
  XLSX.utils.book_append_sheet(workbook, progressSheet, 'Ti·∫øn ƒë·ªô h·ªçc t·∫≠p');
  
  // 5. SHEET PH√ÇN T√çCH TH·ªêNG K√ä
  const statsData = [
    ['üìä PH√ÇN T√çCH TH·ªêNG K√ä CHI TI·∫æT', '', '', '', ''],
    ['', '', '', '', ''],
    ['TH·ªêNG K√ä THEO ƒêI·ªÇM CH·ªÆ:', '', '', '', ''],
    ['Lo·∫°i ƒëi·ªÉm', 'S·ªë m√¥n', 'Ph·∫ßn trƒÉm', 'T√≠n ch·ªâ', 'Ghi ch√∫'],
  ];
  
  // Th·ªëng k√™ chi ti·∫øt theo t·ª´ng grade
  const detailedGradeStats: { [key: string]: { count: number, credits: number } } = {};
  allGradedSubjects.forEach(subject => {
    if (subject.grade !== null) {
      const letterGrade = getLetterGrade(subject.grade);
      if (!detailedGradeStats[letterGrade]) {
        detailedGradeStats[letterGrade] = { count: 0, credits: 0 };
      }
      detailedGradeStats[letterGrade].count++;
      detailedGradeStats[letterGrade].credits += subject.credits;
    }
  });
  
  const gradeOrder = ['A+', 'A', 'B+', 'B', 'C+', 'C', 'D+', 'D', 'F'];
  gradeOrder.forEach(grade => {
    if (detailedGradeStats[grade]) {
      const stat = detailedGradeStats[grade];
      const percentage = ((stat.count / allGradedSubjects.length) * 100).toFixed(1);
      let note = '';
      if (grade === 'A+' || grade === 'A') note = 'üèÜ Xu·∫•t s·∫Øc';
      else if (grade === 'B+' || grade === 'B') note = 'üëç T·ªët';
      else if (grade === 'C+' || grade === 'C') note = 'üìö Kh√°';
      else if (grade === 'D+' || grade === 'D') note = '‚ö†Ô∏è ƒê·∫°t';
      else note = '‚ùå Kh√¥ng ƒë·∫°t';
      
      statsData.push([grade, stat.count.toString(), `${percentage}%`, stat.credits.toString(), note]);
    }
  });
  
  // Th√™m th·ªëng k√™ kh√°c
  statsData.push(['', '', '', '', '']);
  statsData.push(['TH·ªêNG K√ä KH√ÅC:', '', '', '', '']);
  statsData.push(['T·ª∑ l·ªá ƒë·∫°t (‚â•5.0):', 
    `${allGradedSubjects.filter(s => s.grade! >= 5.0).length}/${allGradedSubjects.length}`,
    `${((allGradedSubjects.filter(s => s.grade! >= 5.0).length / allGradedSubjects.length) * 100).toFixed(1)}%`,
    '', '']);
  statsData.push(['T·ª∑ l·ªá gi·ªèi (‚â•8.0):', 
    `${allGradedSubjects.filter(s => s.grade! >= 8.0).length}/${allGradedSubjects.length}`,
    `${((allGradedSubjects.filter(s => s.grade! >= 8.0).length / allGradedSubjects.length) * 100).toFixed(1)}%`,
    '', '']);
  
  const statsSheet = XLSX.utils.aoa_to_sheet(statsData);
  statsSheet['!cols'] = [
    { wch: 15 }, // Lo·∫°i ƒëi·ªÉm
    { wch: 10 }, // S·ªë m√¥n
    { wch: 12 }, // Ph·∫ßn trƒÉm
    { wch: 10 }, // T√≠n ch·ªâ
    { wch: 15 }, // Ghi ch√∫
  ];
  XLSX.utils.book_append_sheet(workbook, statsSheet, 'Th·ªëng k√™');
  
  // Xu·∫•t file v·ªõi t√™n chi ti·∫øt
  const fileName = `BangDiem_ChiTiet_${data.studentName}_${new Date().toISOString().split('T')[0]}.xlsx`;
  XLSX.writeFile(workbook, fileName);
  
  console.log('‚úÖ ƒê√£ xu·∫•t file Excel v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin:', fileName);
}

// Export d·ªØ li·ªáu ra file Excel v·ªõi th√¥ng tin si√™u chi ti·∫øt
export function exportDetailedExcel(data: StudentRecord): void {
  const workbook = XLSX.utils.book_new();
  const cumulativeGPA = calculateCumulativeGPA(data.semesters);
  const academicLevel = getAcademicLevel(cumulativeGPA);
  
  // 1. SHEET CHI TI·∫æT T·∫§T C·∫¢ C√ÅC M√îN - Th√¥ng tin ƒë·∫ßy ƒë·ªß nh·∫•t
  const detailedSubjectsData = [
    ['üìö DANH S√ÅCH CHI TI·∫æT T·∫§T C·∫¢ C√ÅC M√îN H·ªåC', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],
    [
      'STT', 'M√£ m√¥n', 'T√™n m√¥n h·ªçc', 'T√≠n ch·ªâ', 'H·ªçc k·ª≥', 'Lo·∫°i m√¥n', 'Khoa/B·ªô m√¥n', 'Gi·∫£ng vi√™n',
      'L√Ω thuy·∫øt (ti·∫øt)', 'Th·ª±c h√†nh (ti·∫øt)', 'Gi·ªù h·ªçc/tu·∫ßn', 'ƒê·ªô kh√≥', 'ƒê·ªô quan tr·ªçng',
      'ƒêi·ªÉm chuy√™n c·∫ßn', 'ƒêi·ªÉm qu√° tr√¨nh', 'ƒêi·ªÉm gi·ªØa k·ª≥', 'ƒêi·ªÉm cu·ªëi k·ª≥', 'ƒêi·ªÉm t·ªïng', 'ƒêi·ªÉm ch·ªØ', 'Ghi ch√∫'
    ]
  ];
  
  let stt = 1;
  data.semesters.forEach((semester) => {
    semester.subjects.forEach((subject) => {
      const grade = subject.grade;
      const letterGrade = grade !== null ? getLetterGrade(grade) : '';
      
      // √Ånh x·∫° lo·∫°i m√¥n
      const courseTypeMap = {
        'required': 'B·∫Øt bu·ªôc',
        'elective': 'T·ª± ch·ªçn', 
        'major': 'Chuy√™n ng√†nh',
        'general': 'ƒê·∫°i c∆∞∆°ng'
      };
      
      // Hi·ªÉn th·ªã ƒë·ªô kh√≥ v√† quan tr·ªçng b·∫±ng sao
      const getDifficultyStars = (level?: number) => level ? '‚≠ê'.repeat(level) : '';
      const getImportanceStars = (level?: number) => level ? 'üî•'.repeat(level) : '';
      
      detailedSubjectsData.push([
        stt.toString(),
        subject.courseCode || '',
        subject.name,
        subject.credits.toString(),
        subject.semester || semester.name,
        subject.courseType ? courseTypeMap[subject.courseType] : '',
        subject.department || '',
        subject.instructor || '',
        subject.theoryHours?.toString() || '',
        subject.labHours?.toString() || '',
        subject.studyTime?.toString() || '',
        getDifficultyStars(subject.difficulty),
        getImportanceStars(subject.importance),
        subject.attendanceGrade?.toFixed(1) || '',
        subject.processGrade?.toFixed(1) || '',
        subject.midtermGrade?.toFixed(1) || '',
        subject.finalGrade?.toFixed(1) || '',
        grade?.toFixed(1) || '',
        letterGrade,
        subject.notes || ''
      ]);
      stt++;
    });
  });
  
  const detailedSheet = XLSX.utils.aoa_to_sheet(detailedSubjectsData);
  detailedSheet['!cols'] = [
    { wch: 5 },   // STT
    { wch: 10 },  // M√£ m√¥n
    { wch: 35 },  // T√™n m√¥n
    { wch: 8 },   // T√≠n ch·ªâ
    { wch: 15 },  // H·ªçc k·ª≥
    { wch: 12 },  // Lo·∫°i m√¥n
    { wch: 15 },  // Khoa
    { wch: 20 },  // Gi·∫£ng vi√™n
    { wch: 12 },  // L√Ω thuy·∫øt
    { wch: 12 },  // Th·ª±c h√†nh
    { wch: 12 },  // Gi·ªù h·ªçc
    { wch: 8 },   // ƒê·ªô kh√≥
    { wch: 12 },  // ƒê·ªô quan tr·ªçng
    { wch: 12 },  // Chuy√™n c·∫ßn
    { wch: 12 },  // Qu√° tr√¨nh
    { wch: 12 },  // Gi·ªØa k·ª≥
    { wch: 12 },  // Cu·ªëi k·ª≥
    { wch: 10 },  // T·ªïng
    { wch: 10 },  // Ch·ªØ
    { wch: 30 },  // Ghi ch√∫
  ];
  XLSX.utils.book_append_sheet(workbook, detailedSheet, 'Chi ti·∫øt t·∫•t c·∫£ m√¥n');
  
  // 2. SHEET PH√ÇN T√çCH THEO LO·∫†I M√îN
  const courseTypeData = [
    ['üìä PH√ÇN T√çCH THEO LO·∫†I M√îN H·ªåC', '', '', '', '', '', ''],
    ['', '', '', '', '', '', ''],
    ['Lo·∫°i m√¥n', 'S·ªë m√¥n', 'T√≠n ch·ªâ', 'ƒêi·ªÉm TB', 'GPA TB', 'T·ª∑ l·ªá ƒë·∫°t', 'Ghi ch√∫'],
  ];
  
  const courseTypes = ['required', 'elective', 'major', 'general'] as const;
  const typeNames = {
    'required': 'M√¥n b·∫Øt bu·ªôc',
    'elective': 'M√¥n t·ª± ch·ªçn', 
    'major': 'M√¥n chuy√™n ng√†nh',
    'general': 'M√¥n ƒë·∫°i c∆∞∆°ng'
  };
  
  courseTypes.forEach(type => {
    const subjectsOfType = data.semesters.flatMap(sem => 
      sem.subjects.filter(sub => sub.courseType === type && sub.grade !== null)
    );
    
    if (subjectsOfType.length > 0) {
      const totalCredits = subjectsOfType.reduce((sum, sub) => sum + sub.credits, 0);
      const avgGrade = subjectsOfType.reduce((sum, sub) => sum + (sub.grade! * sub.credits), 0) / totalCredits;
      const avgGPA = subjectsOfType.reduce((sum, sub) => sum + (convertGradeToGPA(sub.grade!) * sub.credits), 0) / totalCredits;
      const passRate = (subjectsOfType.filter(sub => sub.grade! >= 5.0).length / subjectsOfType.length * 100).toFixed(1);
      
      courseTypeData.push([
        typeNames[type],
        subjectsOfType.length.toString(),
        totalCredits.toString(),
        avgGrade.toFixed(2),
        avgGPA.toFixed(2),
        `${passRate}%`,
        avgGPA >= 3.5 ? 'üèÜ Xu·∫•t s·∫Øc' : avgGPA >= 3.0 ? 'üëç T·ªët' : 'üìö C·∫ßn c·ªë g·∫Øng'
      ]);
    }
  });
  
  const courseTypeSheet = XLSX.utils.aoa_to_sheet(courseTypeData);
  courseTypeSheet['!cols'] = Array(7).fill({ wch: 15 });
  XLSX.utils.book_append_sheet(workbook, courseTypeSheet, 'Ph√¢n t√≠ch theo lo·∫°i m√¥n');
  
  // 3. SHEET PH√ÇN T√çCH THEO GI·∫¢NG VI√äN
  const instructorData = [
    ['üë®‚Äçüè´ PH√ÇN T√çCH THEO GI·∫¢NG VI√äN', '', '', '', '', ''],
    ['', '', '', '', '', ''],
    ['Gi·∫£ng vi√™n', 'S·ªë m√¥n', 'ƒêi·ªÉm TB', 'GPA TB', 'ƒê√°nh gi√°', 'Ghi ch√∫'],
  ];
  
  const instructorStats: { [key: string]: Subject[] } = {};
  data.semesters.forEach(sem => {
    sem.subjects.forEach(sub => {
      if (sub.instructor && sub.grade !== null) {
        if (!instructorStats[sub.instructor]) {
          instructorStats[sub.instructor] = [];
        }
        instructorStats[sub.instructor].push(sub);
      }
    });
  });
  
  Object.entries(instructorStats).forEach(([instructor, subjects]) => {
    const totalCredits = subjects.reduce((sum, sub) => sum + sub.credits, 0);
    const avgGrade = subjects.reduce((sum, sub) => sum + (sub.grade! * sub.credits), 0) / totalCredits;
    const avgGPA = subjects.reduce((sum, sub) => sum + (convertGradeToGPA(sub.grade!) * sub.credits), 0) / totalCredits;
    
    let evaluation = '';
    if (avgGPA >= 3.5) evaluation = 'üåü R·∫•t t·ªët';
    else if (avgGPA >= 3.0) evaluation = 'üëç T·ªët';
    else if (avgGPA >= 2.5) evaluation = 'üìö Kh√°';
    else evaluation = '‚ö†Ô∏è Trung b√¨nh';
    
    instructorData.push([
      instructor,
      subjects.length.toString(),
      avgGrade.toFixed(2),
      avgGPA.toFixed(2),
      evaluation,
      `${subjects.length} m√¥n h·ªçc`
    ]);
  });
  
  const instructorSheet = XLSX.utils.aoa_to_sheet(instructorData);
  instructorSheet['!cols'] = Array(6).fill({ wch: 20 });
  XLSX.utils.book_append_sheet(workbook, instructorSheet, 'Ph√¢n t√≠ch gi·∫£ng vi√™n');
  
  // 4. SHEET PH√ÇN T√çCH ƒê·ªò KH√ì V√Ä QUAN TR·ªåNG
  const difficultyData = [
    ['‚≠ê PH√ÇN T√çCH ƒê·ªò KH√ì V√Ä QUAN TR·ªåNG', '', '', '', '', '', ''],
    ['', '', '', '', '', '', ''],
    ['ƒê·ªô kh√≥', 'S·ªë m√¥n', 'ƒêi·ªÉm TB', 'GPA TB', 'ƒê·ªô quan tr·ªçng TB', 'K·∫øt qu·∫£', 'Ghi ch√∫'],
  ];
  
  for (let difficulty = 1; difficulty <= 5; difficulty++) {
    const subjectsWithDifficulty = data.semesters.flatMap(sem => 
      sem.subjects.filter(sub => sub.difficulty === difficulty && sub.grade !== null)
    );
    
    if (subjectsWithDifficulty.length > 0) {
      const totalCredits = subjectsWithDifficulty.reduce((sum, sub) => sum + sub.credits, 0);
      const avgGrade = subjectsWithDifficulty.reduce((sum, sub) => sum + (sub.grade! * sub.credits), 0) / totalCredits;
      const avgGPA = subjectsWithDifficulty.reduce((sum, sub) => sum + (convertGradeToGPA(sub.grade!) * sub.credits), 0) / totalCredits;
      const avgImportance = subjectsWithDifficulty.reduce((sum, sub) => sum + (sub.importance || 0), 0) / subjectsWithDifficulty.length;
      
      difficultyData.push([
        `${difficulty} ${'‚≠ê'.repeat(difficulty)}`,
        subjectsWithDifficulty.length.toString(),
        avgGrade.toFixed(2),
        avgGPA.toFixed(2),
        avgImportance.toFixed(1),
        avgGPA >= 3.0 ? '‚úÖ T·ªët' : '‚ö†Ô∏è C·∫ßn c·∫£i thi·ªán',
        difficulty >= 4 ? 'M√¥n kh√≥' : difficulty <= 2 ? 'M√¥n d·ªÖ' : 'M√¥n trung b√¨nh'
      ]);
    }
  }
  
  const difficultySheet = XLSX.utils.aoa_to_sheet(difficultyData);
  difficultySheet['!cols'] = Array(7).fill({ wch: 15 });
  XLSX.utils.book_append_sheet(workbook, difficultySheet, 'Ph√¢n t√≠ch ƒë·ªô kh√≥');
  
  // 5. SHEET TH·ªêNG K√ä ƒêI·ªÇM CHI TI·∫æT
  const gradeBreakdownData = [
    ['üìã TH·ªêNG K√ä ƒêI·ªÇM CHI TI·∫æT', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', ''],
    ['Lo·∫°i ƒëi·ªÉm', 'ƒêi·ªÉm TB', 'ƒêi·ªÉm cao nh·∫•t', 'ƒêi·ªÉm th·∫•p nh·∫•t', 'S·ªë m√¥n c√≥ ƒëi·ªÉm', 'T·ª∑ l·ªá ho√†n th√†nh', '·∫¢nh h∆∞·ªüng', 'Ghi ch√∫'],
  ];
  
  const gradeTypes = [
    { key: 'attendanceGrade', name: 'ƒêi·ªÉm chuy√™n c·∫ßn', weight: '10%' },
    { key: 'processGrade', name: 'ƒêi·ªÉm qu√° tr√¨nh', weight: '20%' },
    { key: 'midtermGrade', name: 'ƒêi·ªÉm gi·ªØa k·ª≥', weight: '30%' },
    { key: 'finalGrade', name: 'ƒêi·ªÉm cu·ªëi k·ª≥', weight: '40%' },
    { key: 'grade', name: 'ƒêi·ªÉm t·ªïng k·∫øt', weight: '100%' }
  ];
  
  gradeTypes.forEach(gradeType => {
    const allSubjects = data.semesters.flatMap(sem => sem.subjects);
    const subjectsWithGrade = allSubjects.filter(sub => 
      (sub as any)[gradeType.key] !== null && (sub as any)[gradeType.key] !== undefined
    );
    
    if (subjectsWithGrade.length > 0) {
      const grades = subjectsWithGrade.map(sub => (sub as any)[gradeType.key] as number);
      const avgGrade = grades.reduce((sum, grade) => sum + grade, 0) / grades.length;
      const maxGrade = Math.max(...grades);
      const minGrade = Math.min(...grades);
      const completionRate = (subjectsWithGrade.length / allSubjects.length * 100).toFixed(1);
      
      gradeBreakdownData.push([
        gradeType.name,
        avgGrade.toFixed(2),
        maxGrade.toFixed(1),
        minGrade.toFixed(1),
        subjectsWithGrade.length.toString(),
        `${completionRate}%`,
        gradeType.weight,
        avgGrade >= 8.0 ? 'üèÜ Xu·∫•t s·∫Øc' : avgGrade >= 7.0 ? 'üëç T·ªët' : 'üìö C·∫ßn c·ªë g·∫Øng'
      ]);
    }
  });
  
  const gradeBreakdownSheet = XLSX.utils.aoa_to_sheet(gradeBreakdownData);
  gradeBreakdownSheet['!cols'] = Array(8).fill({ wch: 15 });
  XLSX.utils.book_append_sheet(workbook, gradeBreakdownSheet, 'Th·ªëng k√™ ƒëi·ªÉm chi ti·∫øt');
  
  // G·ªçi h√†m xu·∫•t Excel c≈© ƒë·ªÉ c√≥ ƒë·∫ßy ƒë·ªß c√°c sheet kh√°c
  const fileName = `BangDiem_SieuChiTiet_${data.studentName}_${new Date().toISOString().split('T')[0]}.xlsx`;
  XLSX.writeFile(workbook, fileName);
  
  console.log('‚úÖ ƒê√£ xu·∫•t file Excel si√™u chi ti·∫øt:', fileName);
}

// C·∫£i thi·ªán ch·ª©c nƒÉng l∆∞u tr·ªØ localStorage v·ªõi backup
export function saveDataWithBackup(data: StudentRecord): void {
  try {
    // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
    if (!data || !data.id || !data.semesters) {
      console.error('‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, b·ªè qua vi·ªác l∆∞u');
      return;
    }

    const dataString = JSON.stringify(data);
    
    // L∆∞u d·ªØ li·ªáu ch√≠nh
    localStorage.setItem(STORAGE_KEY, dataString);
    
    // T·∫°o backup v·ªõi timestamp (ch·ªâ t·∫°o backup m·ªói 30 gi√¢y ƒë·ªÉ tr√°nh spam)
    const now = Date.now();
    const lastBackupKey = `${STORAGE_KEY}_last_backup_time`;
    const lastBackupTime = localStorage.getItem(lastBackupKey);
    
    if (!lastBackupTime || (now - parseInt(lastBackupTime)) > 30000) {
      const backupKey = `${STORAGE_KEY}_backup_${now}`;
      localStorage.setItem(backupKey, dataString);
      localStorage.setItem(lastBackupKey, now.toString());
      
      // Gi·ªØ ch·ªâ 5 backup g·∫ßn nh·∫•t
      const allKeys = Object.keys(localStorage);
      const backupKeys = allKeys
        .filter(key => key.startsWith(`${STORAGE_KEY}_backup_`))
        .sort()
        .reverse();
      
      // X√≥a backup c≈© n·∫øu c√≥ qu√° 5 backup
      backupKeys.slice(5).forEach(key => {
        localStorage.removeItem(key);
      });
      
      console.log('‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v·ªõi backup m·ªõi');
    } else {
      console.log('üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng');
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu:', error);
    // Fallback v·ªÅ h√†m saveData c≈©
    try {
      saveData(data);
      console.log('‚úÖ ƒê√£ l∆∞u b·∫±ng ph∆∞∆°ng th·ª©c fallback');
    } catch (fallbackError) {
      console.error('‚ùå L·ªói c·∫£ fallback:', fallbackError);
    }
  }
}

// Kh√¥i ph·ª•c t·ª´ backup
export function restoreFromBackup(): StudentRecord[] {
  try {
    const allKeys = Object.keys(localStorage);
    const backupKeys = allKeys
      .filter(key => key.startsWith(`${STORAGE_KEY}_backup_`))
      .sort()
      .reverse();
    
    const backups: StudentRecord[] = [];
    backupKeys.forEach(key => {
      try {
        const data = localStorage.getItem(key);
        if (data) {
          const backup = JSON.parse(data);
          backup._backupDate = new Date(parseInt(key.split('_').pop() || '0')).toLocaleString('vi-VN');
          backups.push(backup);
        }
      } catch (error) {
        console.error('L·ªói khi ƒë·ªçc backup:', key, error);
      }
    });
    
    return backups;
  } catch (error) {
    console.error('L·ªói khi kh√¥i ph·ª•c backup:', error);
    return [];
  }
}

// Th·ªëng k√™ s·ª≠ d·ª•ng localStorage
export function getStorageStats(): { 
  dataSize: string; 
  backupCount: number; 
  totalSize: string;
  lastSaved: string;
} {
  try {
    let totalBytes = 0;
    let dataBytes = 0;
    let backupCount = 0;
    let lastSaved = 'Ch∆∞a c√≥ d·ªØ li·ªáu';
    
    const allKeys = Object.keys(localStorage);
    
    allKeys.forEach(key => {
      const data = localStorage.getItem(key);
      if (data) {
        const size = new Blob([data]).size;
        totalBytes += size;
        
        if (key === STORAGE_KEY) {
          dataBytes = size;
          try {
            const parsed = JSON.parse(data);
            lastSaved = new Date().toLocaleString('vi-VN'); // Hi·ªán t·∫°i ch∆∞a l∆∞u timestamp trong data
          } catch (error) {
            // ignore
          }
        } else if (key.startsWith(`${STORAGE_KEY}_backup_`)) {
          backupCount++;
        }
      }
    });
    
    return {
      dataSize: formatBytes(dataBytes),
      backupCount,
      totalSize: formatBytes(totalBytes),
      lastSaved
    };
  } catch (error) {
    console.error('L·ªói khi l·∫•y th·ªëng k√™:', error);
    return {
      dataSize: '0 B',
      backupCount: 0,
      totalSize: '0 B',
      lastSaved: 'L·ªói'
    };
  }
}

// Helper function ƒë·ªÉ format bytes
function formatBytes(bytes: number): string {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
} 